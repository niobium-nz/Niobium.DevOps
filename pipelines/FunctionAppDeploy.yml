parameters:
- name: serviceConnectionId
  type: string
- name: azureServiceConnection
  type: string
- name: resourceGroupName
  type: string
- name: appNamePrefix
  type: string
- name: buildAgentVmImage
  type: string
  default: 'windows-latest'
- name: checkoutDevopsStep
  type: step
  default:
    script: echo dummy step

stages:
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - job: Infrastructure
    steps:
    - ${{ parameters.checkoutDevopsStep }}
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Infrastructure Provisioning'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: ${{ parameters.azureServiceConnection }}
        action: 'Create Or Update Resource Group'
        resourceGroupName: ${{ parameters.resourceGroupName }}
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/bicep/FunctionApp.bicep'
        overrideParameters: '-appNamePrefix ${{ parameters.appNamePrefix }}'
        deploymentMode: 'Incremental'
        deploymentName: 'DeployPipelineTemplate'
        deploymentOutputs: 'infrastructureOutputs'
    
    - powershell: |
        $var=ConvertFrom-Json '$(infrastructureOutputs)'
        $value=$var.functionAppName.value
        Write-Host "##vso[task.setvariable variable=functionAppName;isoutput=true]$value"
      name: passInfrastructureOutputs

  - deployment: Deploy
    displayName: Deploy
    dependsOn: Infrastructure
    condition: succeeded()
    environment: 'production'
    pool:
      vmImage: ${{ parameters.buildAgentVmImage }}
    variables:
      functionAppName: $[ dependencies.Infrastructure.outputs['passInfrastructureOutputs.functionAppName'] ]  

    strategy:
      runOnce:
        deploy:
          steps: 
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: ${{ parameters.serviceConnectionId }}
              resourceGroupName: ${{ parameters.resourceGroupName }}
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'