parameters:
- name: serviceConnection
  type: string
- name: resourceGroupName
  type: string
- name: buildAgentVmImage
  type: string
  default: 'windows-latest'
- name: enableStagingSlot
  type: boolean
  default: false
- name: autoSwapSlots
  type: boolean
  default: false
- name: appName
  type: string

jobs:
- deployment: Deploy
  displayName: Deploy
  dependsOn: 
    - Build
    - Infrastructure
    - Configuration
  condition: not(failed())
  environment: 'production'
  pool:
    vmImage: ${{ parameters.buildAgentVmImage }}

  strategy:
    runOnce:
      deploy:
        steps: 
        - pwsh: Write-Output "##vso[task.setvariable variable=slotName;]production"
          displayName: "Deploy to Production"
          condition: eq('${{ parameters.enableStagingSlot }}', false)

        - pwsh: Write-Output "##vso[task.setvariable variable=slotName;]staging"
          displayName: "Deploy to Staging"
          condition: eq('${{ parameters.enableStagingSlot }}', true)

        - task: AzureFunctionApp@2
          displayName: 'Functions Deploy'
          inputs:
            connectedServiceNameARM: ${{ parameters.serviceConnection }}
            resourceGroupName: ${{ parameters.resourceGroupName }}
            appType: functionApp
            appName: ${{ parameters.appName }}
            slotName: $(slotName)
            deployToSlotOrASE: ${{ parameters.enableStagingSlot }}
            package: '$(Pipeline.Workspace)/drop/$(Build.BuildNumber).zip'
            
        - task: AzureAppServiceManage@0
          displayName: 'Swap Production'
          condition: and('${{ parameters.autoSwapSlots }}', eq('${{ parameters.enableStagingSlot }}', true))
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            ResourceGroupName: ${{ parameters.resourceGroupName }}
            Action: 'Swap Slots'
            WebAppName: ${{ parameters.appName }}
            SourceSlot: $(slotName)
            SwapWithProduction: true
