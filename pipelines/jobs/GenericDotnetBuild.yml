parameters:
- name: buildAgentVmImage
  type: string
  default: 'windows-latest'
- name: projectToPublish
  type: string
  default: '**/*.csproj'
- name: dotnetVersion
  type: string
  default: '8.x'
- name: nugetVSTSFeedID
  type: string
  default: ''
- name: zipArtifact
  type: boolean
  default: true

jobs:
- job: Build
  pool:
    vmImage: ${{ parameters.buildAgentVmImage }}

  steps:
  - checkout: self
    submodules: true
    
  - task: UseDotNet@2
    displayName: 'Use .NET SDK'
    inputs:
      version: ${{ parameters.dotnetVersion }}

  - task: NuGetAuthenticate@1
    inputs:
      forceReinstallCredentialProvider: true

  - task: DotNetCoreCLI@2
    displayName: 'Restore Packages'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      feedsToUse: 'config'
      nugetConfigPath: nuget.config
        
  - task: DotNetCoreCLI@2
    displayName: 'Compile Projects'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: --configuration Release
        
  - task: DotNetCoreCLI@2
    displayName: 'Unit Test'
    inputs:
      command: 'test'
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration Release --logger trx --collect "Code coverage"'
      publishTestResults: true

  - task: PublishTestResults@2
    inputs:
      testRunner: 'Test Result'
      testResultsFiles: '**/*.trx'

  - task: NuGetCommand@2
    displayName: 'Push NuGet'
    condition: and(succeeded(), ne('${{ parameters.nugetVSTSFeedID }}', ''))
    inputs:
      command: push
      packagesToPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;$(System.DefaultWorkingDirectory)/**/*.snupkg'
      publishVstsFeed: ${{ parameters.nugetVSTSFeedID }}
        
  - task: DotNetCoreCLI@2
    displayName: 'Publish Build'
    inputs:
      command: 'publish'
      projects: ${{ parameters.projectToPublish }}
      arguments: '--configuration Release --output $(System.DefaultWorkingDirectory)/publish/'
      zipAfterPublish: false
      publishWebProjects: false
      modifyOutputPath: false
      
  - task: ArchiveFiles@2
    displayName: 'Archive Build'
    condition: and(succeeded(), eq(${{ parameters.zipArtifact }}, true))
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish'
      includeRootFolder: false
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).zip
      replaceExistingArchive: true

  - task: CopyFiles@2
    displayName: 'Stage Build'
    condition: and(succeeded(), eq(${{ parameters.zipArtifact }}, false))
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)/publish/'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/'

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: drop