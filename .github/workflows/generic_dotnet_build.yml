name: Dotnet Publish

on:
  workflow_call:
    inputs:
      dotnetVersion:
        required: false
        type: string
        default: '9.x'
      projectToPublish:
        required: false
        type: string
        default: ''
      zipArtifact:
        required: false
        type: boolean
        default: false
      pushPackage:
        required: false
        type: boolean
        default: false
      nugetFeedUrl:
        required: false
        type: string
        default: 'https://api.nuget.org/v3/index.json'
      buildVersion:
        required: false
        type: string
        default: '1.0'
    secrets:
      NUGET_API_KEY:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnetVersion }}

    - name: Restore Packages
      run: dotnet restore

    - name: Build Projects
      run: dotnet build --configuration Release /p:BUILD_BUILDNUMBER=${{ inputs.buildVersion }}.${{ github.run_id }}

    - name: Run Unit Tests
      run: dotnet test --configuration Release /p:BUILD_BUILDNUMBER=${{ inputs.buildVersion }}.${{ github.run_id }} --logger trx --collect "Code coverage"

    - name: Publish Test Results
      uses: dorny/test-reporter@v2
      with:
        name: Test Results
        path: '**/*.trx'
        reporter: dotnet-trx
      continue-on-error: true

    - name: Generate Coverage Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.12
      with:
        reports: '**/TestResults/*/coverage.cobertura.xml'
        targetdir: 'coverage-report'
        reporttypes: 'HtmlInline;Cobertura'
      continue-on-error: true

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report

    - name: Publish NuGet Package
      if: ${{ inputs.pushPackage }}
      run: |
        Get-ChildItem -Path . -Recurse -Filter *.nupkg | ForEach-Object {
          dotnet nuget push $_.FullName --source "${{ inputs.nugetFeedUrl }}" --api-key "$env:NUGET_API_KEY"
        }
        Get-ChildItem -Path . -Recurse -Filter *.snupkg | ForEach-Object {
          dotnet nuget push $_.FullName --source "${{ inputs.nugetFeedUrl }}" --api-key "$env:NUGET_API_KEY"
        }
      shell: pwsh
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    - name: Publish Build
      if: ${{ inputs.projectToPublish != '' }}
      run: dotnet publish "${{ inputs.projectToPublish }}" /p:BUILD_BUILDNUMBER=${{ inputs.buildVersion }}.${{ github.run_id }} --configuration Release --output ./publish/

    - name: Archive Build
      if: ${{ inputs.zipArtifact && inputs.projectToPublish != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: build-zip
        path: ./publish/

    - name: Stage Build (Unzipped)
      if: ${{ !inputs.zipArtifact && inputs.projectToPublish != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: build-folder
        path: ./publish/
